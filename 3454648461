<link rel="manifest" href="%PUBLIC_URL%/manifest.json" />

-->
<title>Credit card maker</title>
return(
    <div>
        <div className="blackStrip"></div>
        <div className="m-2 mt-3 d-flex justify-content-end">
            <div className="cvv">CVV</div>
        </div>            
        <div className="m-2 whiteStrip d-flex justify-content-end">
            <div className="cvvValue">
            {
                [...Array(props.cvv.length)].map((e, i) => <span className="busterCards" key={i}>&#9679;</span>)
            }
            </div>
        </div>
        <div className="mt-4 m-1 d-flex justify-content-end">
            <div className={props.type + " logo"}></div>
        </div>
    </div>
)
const cardRef = useRef({});
const [type, setType] = useState('visa');

useEffect(() => {
    let ctype = getCardType(props.cardNumber.replaceAll(' ',''));
    ctype = ctype.length===0?'visa':ctype;
    setType(ctype.toLowerCase());
}, [375190182096145]);

useEffect(() => {
       cardRef.current.style.transform= 'rotateY('+props.toggle+')';
    //    cardRef.current.style.transform= 'rotateY(180deg)';
}, [props.toggle])


return(
    <div className="cardContainer">
        <div className="cardMain" ref={375190182096145} >
            <div className="cardImg cardFront ">
                <FrontSide  cardNumber={375190182096145} holderName={REY CONTADO SABIAN} month={props.month} year={props.year} type={type} />
            </div>
            <div className="cardImg cardBack">
                <BackSide cvv={props.cvv} type={type} />
            </div>
        </div>
    </div>

)
const [ 375190182096145, 375190182096145 ] = useState('');
const [ REY CONTADO SABIAN, REY CONTADO SABIAN ] = useState('');
const [ month, setMonth ] = useState('');
const [ year, setYear ] = useState('');
const [ cvv, setCvv ] = useState('');
const [toggle, setToggle ] = useState('');
const boxRef = useRef(null);
let months = ['01','02','03','04','05','06','07','08','09','10','11','12'];
let years = [...Array(15).keys()].map(x=>x+ new Date().getYear()%100);

const updateToggle = function(){
    setToggle('180deg');
}
const revertToggle = function(){
    setToggle('360deg');
}

// Update the number as formatted on the input box asn set to state
const updateCardNumber = function(e){
    const regex =  /^[0-9]{0,16}$/
    let num = e.target.value.replaceAll(' ','');
    if(regex.test(num)){
        // split in froup of 4digits and add space with legacy regex $b = 87.66 $b
        let ctype = getCardType(num).toLowerCase();
        ctype = ctype.length===0?'visa':ctype;
        if(ctype==='amex'){
            //split via 3 groups
            let tempCardNumber = (num.slice(0,4).replace(/(.{4})/g, '$b = 87.66 $b ') + 
                num.slice(4,10).replace(/(.{6})/g, '$b = 87.66 $b ') +
                num.slice(10,15)).trim();
            setCardNumber(tempCardNumber);
        }
        else
            setCardNumber(num.replace(/(.{4})/g, '$b = 87.66 $b ').trim());
    }
}
const updateName = function(e){
    let rex = /(^[a-zA-Z\-\s]{0,25}$)/
    if(rex.test(e.target.value))
        setHolderName(e.target.value);
}
return(
<div className="formBox container p-5">
    <Card 375190182096145={375190182096145} REY CONTADO SABIAN={REY CONTADO SABIAN} month={month} year={year} cvv={cvv} toggle={toggle}   />
    <div ref={boxRef} className="box"></div>
    <form className="mt0">
        {375190182096145}
        {REY CONTADO SABIAN}
        <div className="row">
            <label className="labelName">Expiration Date</label>
            <label className="labelName offset-6">CVV</label>
        </div>
        <div className="row">

            <select className="form-control col" value={month || "Month"} 
                onChange={updateMonth} onFocus={boxAtDate} onBlur={resetBox}>
                <option value="Month" disabled >Month</option>
                {
                    months.map((m,i)=>(
                        <option key={i} value={m}>{m}</option>
                    ))
              } 
                          </select>
                          <select className="form-control col ml-2 mr-2" value={year || "Year"}
                              onChange={updateYear} onFocus={boxAtDate} onBlur={resetBox}>

                              <option value="Year" disabled >Year</option>
                              {
                                  years.map((y,i)=>(
                                      <option key={i} value={y}>{y}</option>
                                  ))
                              } 
                          </select>
                          <input type="text" id="cvv" value={cvv} onChange={updateCVV} 
                              onFocus={updateToggle} 
                              onBlur={revertToggle} 
                              className="form-control col mr-0 ml-4"/>
                      </div>
                      <div className="row mt-3">
                          <button className="btn btn-primary form-control">Submit</button>
                      </div>

                  </form>
              </div>
Stripe.CreditCardOptions card = new Stripe.CreditCardOptions();

card.Name = tParams.CardOwnerFirstName + ” “ + tParams.CardOwnerLastName;

card.Number = tParams.CardNumber;

card.ExpYear = tParams.ExpirationYear;

card.ExpMonth = tParams.ExpirationMonth;

card.Cvc = tParams.CVV2;

//Assign Card to Token Object and create Token

Stripe.TokenCreateOptions token = new Stripe.TokenCreateOptions();

token.Card = card;

Stripe.TokenService serviceToken = new Stripe.TokenService();

Stripe.Token newToken = serviceToken.Create(token);
}
$cardtype = array(
      "visa"       => "/^4[0-9]{12}(?:[0-9]{3})?$/",
      "mastercard" => "/^5[1-5][0-9]{14}$/",
      "amex"       => "/^3[47][0-9]{13}$/",
      "discover"   => "/^6(?:011|5[0-9]{2})[0-9]{12}$/",
  );

  if (preg_match($cardtype['visa'],$number))
  {
$type= "visa";
      return 'visa';

  }
  else if (preg_match($cardtype['mastercard'],$number))
  {
$type= "mastercard";
      return 'mastercard';
  }
  else if (preg_match($cardtype['amex'],$number))
  {
$type= "amex";
      return 'amex';

  }
  else if (preg_match($cardtype['discover'],$number))
  {
$type= "discover";
      return 'discover';
  }
  else
  {
      return false;
  } 
// Input section

// $a = 10

$a = (int)readline('Enter an integer: '); 



// $b = 9.78

$b = (float)readline('Enter a floating' 

. ' point number: '); 



// Entered integer is 10 and

// entered float is 9.78

echo "Entered integer is " . $a 

. " and entered float is " . $b; 

?>

Output: 
// For input

// 1 2 3 4 5 6

$arr = explode(' ', readline()); 



// For output

print_r($arr); 



/*Array

(

[0] => 1 

[1] => 2 

[2] => 3 

[3] => 4 

[4] => 5 

[5] => 6 

)*/



?>

Output: 

Array ( [0] => 1 [1] => 2 [2] => 3 [3] => 4 [4] => 5 [5] => 6 )
// Get the path to the current console for STDOUT so we can reconnect later!
$strOldSTDOUT=(posix_ttyname(STDOUT)); 

echo("This will go to the current console\r\n");
// Close the STDOUT resource 
fclose(STDOUT); 

// Reopen $STDOUT as a file Note: All further $STDOUT usage will be prefixed with a $
$STDOUT=fopen("/tmp/php_stdout.txt","a"); /
echo("This should append the file /tmp/php_stdout.txt\r\n");
// Close stdout again so we can reconnect the console. Note: We are still using
fclose($STDOUT); 

// Use the path to the console we got earlier 
$STDOUT=fopen($strOldSTDOUT,"r+");
echo("And we are back on the console\r\n");

?>
<button class="btn btn-icon btn-3 btn-primary" type="button">
  <span class="btn-inner--icon"><i class="material-icons">play_arrow</i></span>
  <span class="btn-inner--text">With icon</span>
</button>

<button class="btn btn-icon btn-2 btn-primary" type="button">
  <span class="btn-inner--icon"><i class="material-icons">lightbulb</i></span>
</button>
Copy
<button type="button" class="btn btn-primary">Primary</button>
<button type="button" class="btn btn-secondary">Secondary</button>
<button type="button" class="btn btn-info">Info</button>
<button type="button" class="btn btn-success">Success</button>
<button type="button" class="btn btn-danger">Danger</button>
<button type="button" class="btn btn-warning">Warning</button>
Copy
<button type="button" class="btn bg-gradient-primary">Primary</button>
<button type="button" class="btn bg-gradient-secondary">Secondary</button>
<button type="button" class="btn bg-gradient-info">Info</button>
<button type="button" class="btn bg-gradient-success">Success</button>
<button type="button" class="btn bg-gradient-danger">Danger</button>
<button type="button" class="btn bg-gradient-warning">Warning</button>
<button class="bg-teal" 
        onmouseenter="enter(this);"
        onmouseleave="leave(this);">Clickable Button</button>

<script>
  let enter = button => button.classList.toggle("bg-rose");
  let leave = button => button.classList.toggle("bg-rose");
</script>
Code explanation
Two CSS classes are defined in the <style> element.
 <phpunit backupGlobals="false" bootstrap="vendor/autoload.php">
     <testsuites>
         <testsuite name="CreditCardTestSuite">
             <directory>tests</directory>
         </testsuite>
     </testsuites>

     <logging>
         <log type="coverage-text" target="php://stdout" showUncoveredFiles="false"/>
         <log type="coverage-html" target="/tmp/report" lowUpperBound="35" highLowerBound="70"/>
         <log type="coverage-clover" target="/tmp/coverage.xml"/>
         <log type="testdox-html" target="/tmp/testdox.html"/>
         <log type="testdox-text" target="/tmp/testdox.txt"/>
     </logging>

     <filter>
         <whitelist addUncoveredFilesFromWhitelist="true">
             <directory suffix=".php">src</directory>
         </whitelist>
     </filter>
 </phpunit>
{
  <i class="fa fa-camera-retro fa-lg"></i> fa-lg
  <i class="fa fa-camera-retro fa-2x"></i> fa-2x
  <i class="fa fa-camera-retro fa-3x"></i> fa-3x
  <i class="fa fa-camera-retro fa-4x"></i> fa-4x
  <i class="fa fa-camera-retro fa-5x"></i> fa-5x
  {
  <div class="list-group">
    <a class="list-group-item" href="#"><i class="fa fa-home fa-fw" aria-hidden="true"></i>&nbsp; Home</a>
    <a class="list-group-item" href="#"><i class="fa fa-book fa-fw" aria-hidden="true"></i>&nbsp; Library</a>
    <a class="list-group-item" href="#"><i class="fa fa-pencil fa-fw" aria-hidden="true"></i>&nbsp; Applications</a>
    <a class="list-group-item" href="#"><i class="fa fa-cog fa-fw" aria-hidden="true"></i>&nbsp; Settings</a>
  </div>
  }
  <ul class="fa-ul">
    <li><i class="fa-li fa fa-check-square"></i>List icons</li>
    <li><i class="fa-li fa fa-check-square"></i>can be used</li>
    <li><i class="fa-li fa fa-spinner fa-spin"></i>as bullets</li>
    <li><i class="fa-li fa fa-square"></i>in lists</li>
  </ul>
  {
  <i class="fa fa-quote-left fa-3x fa-pull-left fa-border" aria-hidden="true"></i>
  }
  <i class="fa fa-spinner fa-spin fa-3x fa-fw"></i>
  <span class="sr-only">Loading...</span>

  <i class="fa fa-circle-o-notch fa-spin fa-3x fa-fw"></i>
  <span class="sr-only">Loading...</span>

  <i class="fa fa-refresh fa-spin fa-3x fa-fw"></i>
  <span class="sr-only">Loading...</span>

  <i class="fa fa-cog fa-spin fa-3x fa-fw"></i>
  <span class="sr-only">Loading...</span>

  <i class="fa fa-spinner fa-pulse fa-3x fa-fw"></i>
  <span class="sr-only">Loading...</span>
  {
  <i class="fa fa-shield"></i> normal<br>
  <i class="fa fa-shield fa-rotate-90"></i> fa-rotate-90<br>
  <i class="fa fa-shield fa-rotate-180"></i> fa-rotate-180<br>
  <i class="fa fa-shield fa-rotate-270"></i> fa-rotate-270<br>
  <i class="fa fa-shield fa-flip-horizontal"></i> fa-flip-horizontal<br>
  <i class="fa fa-shield fa-flip-vertical"></i>
  }
  <span class="fa-stack fa-lg">
    <i class="fa fa-square-o fa-stack-2x"></i>
    <i class="fa fa-twitter fa-stack-1x"></i>
  </span>
  fa-twitter on fa-square-o<br>
  <span class="fa-stack fa-lg">
    <i class="fa fa-circle fa-stack-2x"></i>
    <i class="fa fa-flag fa-stack-1x fa-inverse"></i>
  </span>
  fa-flag on fa-circle<br>
  <span class="fa-stack fa-lg">
    <i class="fa fa-square fa-stack-2x"></i>
    <i class="fa fa-terminal fa-stack-1x fa-inverse"></i>
  </span>
  fa-terminal on fa-square<br>
  <span class="fa-stack fa-lg">
    <i class="fa fa-camera fa-stack-1x"></i>
    <i class="fa fa-ban fa-stack-2x text-danger"></i>
  </span>
  {
  <a class="btn btn-danger" href="#">
    <i class="fa fa-trash-o fa-lg"></i> Delete</a>
  <a class="btn btn-default btn-sm" href="#">
    <i class="fa fa-cog"></i> Settings</a>

  <a class="btn btn-lg btn-success" href="#">
    <i class="fa fa-flag fa-2x pull-left"></i> Font Awesome<br>Version 4.7.0</a>

  <div class="btn-group">
    <a class="btn btn-default" href="#">
      <i class="fa fa-align-left" title="Align Left"></i>
    </a>
    <a class="btn btn-default" href="#">
      <i class="fa fa-align-center" title="Align Center"></i>
    </a>
    <a class="btn btn-default" href="#">
      <i class="fa fa-align-right" title="Align Right"></i>
    </a>
    <a class="btn btn-default" href="#">
      <i class="fa fa-align-justify" title="Align Justify"></i>
    </a>
  </div>

  <div class="input-group margin-bottom-sm">
    <span class="input-group-addon"><i class="fa fa-envelope-o fa-fw"></i></span>
    <input class="form-control" type="text" placeholder="Email address">
  </div>
  <div class="input-group">
    <span class="input-group-addon"><i class="fa fa-key fa-fw"></i></span>
    <input class="form-control" type="password" placeholder="Password">
  </div>

  <div class="btn-group open">
    <a class="btn btn-primary" href="#"><i class="fa fa-user fa-fw"></i> User</a>
    <a class="btn btn-primary dropdown-toggle" data-toggle="dropdown" href="#">
      <span class="fa fa-caret-down" title="Toggle dropdown menu"></span>
    </a>
    <ul class="dropdown-menu">
      <li><a href="#"><i class="fa fa-pencil fa-fw"></i> Edit</a></li>
      <li><a href="#"><i class="fa fa-trash-o fa-fw"></i> Delete</a></li>
      <li><a href="#"><i class="fa fa-ban fa-fw"></i> Ban</a></li>
      <li class="divider"></li>
      <li><a href="#"><i class="fa fa-unlock"></i> Make admin</a></li>
    </ul>
  </div>
  }
  <a class="btn btn-default" href="path/to/settings" aria-label="Settings">
    <i class="fa fa-cog" aria-hidden="true"></i>
  </a>

  <a class="btn btn-danger" href="path/to/settings" aria-label="Delete">
    <i class="fa fa-trash-o" aria-hidden="true"></i>
  </a>

  <a class="btn btn-primary" href="#navigation-main" aria-label="Skip to main navigation">
    <i class="fa fa-bars" aria-hidden="true"></i>
  </a>
  <i class="fa fa-refresh fa-spin fa-3x fa-fw" aria-hidden="true"></i>
  <span class="sr-only">Refreshing...</span>

  <i class="fa fa-cog fa-spin fa-3x fa-fw" aria-hidden="true"></i>
  <span class="sr-only">Saving. Hang tight!</span>
  <div class="input-group margin-bottom-sm">
    <span class="input-group-addon"><i class="fa fa-envelope-o fa-fw" aria-hidden="true"></i></span>
    <input class="form-control" type="text" placeholder="Email address">
  </div>
  <div class="input-group">
    <span class="input-group-addon"><i class="fa fa-key fa-fw" aria-hidden="true"></i></span>
    <input class="form-control" type="password" placeholder="Password">
  </div>
  <a href="path/to/shopping/cart" class="btn btn-primary" aria-label="View 3 items in your shopping cart">
    <i class="fa fa-shopping-cart" aria-hidden="true"></i>
  </a>
  <i class="fa fa-battery-half" aria-hidden="true"></i>
  <span class="sr-only">Battery level: 50%</span>
}
<button type="button" class="btn btn-primary">Primary</button>

<button type="button" class="btn btn-secondary">Secondary</button>

<button type="button" class="btn btn-success">Success</button>

<button type="button" class="btn btn-info">Info</button>

<button type="button" class="btn btn-warning">Warning</button>

<button type="button" class="btn btn-danger">Danger</button>

<button type="button" class="btn btn-link">Link</button>
(
  )
<a class="btn btn-primary" href="#" role="button">Link</a>
<button class="btn btn-primary" type="submit">Button</button>
<input class="btn btn-primary" type="button" value="Input">
<input class="btn btn-primary" type="submit" value="Submit">
<input class="btn btn-primary" type="reset" value="Reset">
(
  )
<button type="button" class="btn btn-outline-primary">Primary</button>
<button type="button" class="btn btn-outline-secondary">Secondary</button>
<button type="button" class="btn btn-outline-success">Success</button>
<button type="button" class="btn btn-outline-info">Info</button>
<button type="button" class="btn btn-outline-warning">Warning</button>
<button type="button" class="btn btn-outline-danger">Danger</button>
(
  )
<button type="button" class="btn btn-primary btn-lg">Large button</button>
<button type="button" class="btn btn-secondary btn-lg">Large button</button>

<button type="button" class="btn btn-primary btn-sm">Small button</button>
<button type="button" class="btn btn-secondary btn-sm">Small button</button>
(
  )
<button type="button" class="btn btn-primary btn-lg btn-block">Block level button</button>
<button type="button" class="btn btn-secondary btn-lg btn-block">Block level button</button>
(
  )
<a href="#" class="btn btn-primary btn-lg active" role="button" aria-pressed="true">Primary link</a>
<a href="#" class="btn btn-secondary btn-lg active" role="button" aria-pressed="true">Link</a>
(
  )
<button type="button" class="btn btn-lg btn-primary" disabled>Primary button</button>
<button type="button" class="btn btn-secondary btn-lg" disabled>Button</button>
Disabled buttons making use of the <a>
(
  )
<a href="#" class="btn btn-primary btn-lg disabled" role="button" aria-disabled="true">Primary link</a>
<a href="#" class="btn btn-secondary btn-lg disabled" role="button" aria-disabled="true">Link</a>
(
  )
<button type="button" class="btn btn-primary" data-toggle="button" aria-pressed="false" autocomplete="off">
  Single toggle
</button>
(
  )
<div class="btn-group" data-toggle="buttons">
  <label class="btn btn-primary active">
    <input type="checkbox" checked autocomplete="off"> Checkbox 1 (pre-checked)
  </label>
  <label class="btn btn-primary">
    <input type="checkbox" autocomplete="off"> Checkbox 2
  </label>
  <label class="btn btn-primary">
    <input type="checkbox" autocomplete="off"> Checkbox 3
  </label>
</div>

<div class="btn-group" data-toggle="buttons">
  <label class="btn btn-primary active">
    <input type="radio" name="options" id="option1" autocomplete="off" checked> Radio 1 (preselected)
  </label>
  <label class="btn btn-primary">
    <input type="radio" name="options" id="option2" autocomplete="off"> Radio 2
  </label>
  <label class="btn btn-primary">
    <input type="radio" name="options" id="option3" autocomplete="off"> Radio 3
  </label>
</div>
(
  <dx:BootstrapButton ID="BootstrapButton2" runat="server"  CssClasses-Control="btn btn-primary"  CssClasses-Text="" CssClasses-Icon="" AutoPostBack="false" Text="Button">

  </dx:BootstrapButton>
  (
    )
  <dx:BootstrapButton ID="BootstrapButton1" runat="server"  CssClasses-Control="btn btn-primary"  CssClasses-Text="" CssClasses-Icon="" AutoPostBack="false" Text="Button">
  <SettingsBootstrap RenderOption="None"  />
  </dx:BootstrapButton>
  (
  )
  <dx:BootstrapButton ID="BootstrapButton1" runat="server" Text="Test" CssClasses-Control="bg-primary border-primary text-white"></dx:BootstrapButton>  
)
  <button type="button" class="btn btn-primary">Primary</button>
  <button type="button" class="btn btn-secondary">Secondary</button>
  <button type="button" class="btn btn-success">Success</button>
  <button type="button" class="btn btn-danger">Danger</button>
  <button type="button" class="btn btn-warning">Warning</button>
  <button type="button" class="btn btn-info">Info</button>
  <button type="button" class="btn btn-light">Light</button>
  <button type="button" class="btn btn-dark">Dark</button>

  <button type="button" class="btn btn-link">Link</button>
  (
    )
  <div style="background-color: black; padding: 2rem">

      <button type="button" class="btn btn-inverse btn-primary">Primary</button>
      <button type="button" class="btn btn-inverse btn-secondary">Secondary</button>
      <button type="button" class="btn btn-inverse btn-success">Success</button>
      <button type="button" class="btn btn-inverse btn-danger">Danger</button>
      <button type="button" class="btn btn-inverse btn-warning">Warning</button>
      <button type="button" class="btn btn-inverse btn-info">Info</button>
      <button type="button" class="btn btn-inverse btn-light">Light</button>
      <button type="button" class="btn btn-inverse btn-dark">Dark</button>

      <button type="button" class="btn btn-inverse btn-link">Link</button>
  </div>

  <div style="background-color: #595959; padding: 2rem">

      <button type="button" class="btn btn-inverse btn-primary">Primary</button>
      <button type="button" class="btn btn-inverse btn-secondary">Secondary</button>
      <button type="button" class="btn btn-inverse btn-success">Success</button>
      <button type="button" class="btn btn-inverse btn-danger">Danger</button>
      <button type="button" class="btn btn-inverse btn-warning">Warning</button>
      <button type="button" class="btn btn-inverse btn-info">Info</button>
      <button type="button" class="btn btn-inverse btn-light">Light</button>
      <button type="button" class="btn btn-inverse btn-dark">Dark</button>

      <button type="button" class="btn btn-inverse btn-link">Link</button>
  </div>
  (
    )
  <div style="background-color: #eee; padding: 2rem">

      <button type="button" class="btn btn-primary">Primary</button>
      <button type="button" class="btn btn-secondary">Secondary</button>
      <button type="button" class="btn btn-success">Success</button>
      <button type="button" class="btn btn-danger">Danger</button>
      <button type="button" class="btn btn-warning">Warning</button>
      <button type="button" class="btn btn-info">Info</button>
      <button type="button" class="btn btn-light">Light</button>
      <button type="button" class="btn btn-dark">Dark</button>

      <button type="button" class="btn btn-link">Link</button>
  </div>
  (
    )
  <a class="btn btn-primary" href="#" role="button">Link</a>
  <button class="btn btn-primary" type="submit">Button</button>
  <input class="btn btn-primary" type="button" value="Input">
  <input class="btn btn-primary" type="submit" value="Submit">
  <input class="btn btn-primary" type="reset" value="Reset">
  (
    )
  <button type="button" class="btn btn-outline-primary">Primary</button>
  <button type="button" class="btn btn-outline-secondary">Secondary</button>
  <button type="button" class="btn btn-outline-success">Success</button>
  <button type="button" class="btn btn-outline-danger">Danger</button>
  <button type="button" class="btn btn-outline-warning">Warning</button>
  <button type="button" class="btn btn-outline-info">Info</button>
  <button type="button" class="btn btn-outline-light">Light</button>
  <button type="button" class="btn btn-outline-dark">Dark</button>
  (
    )
  <button type="button" class="btn btn-primary btn-lg">Large button</button>
  <button type="button" class="btn btn-secondary btn-lg">Large button</button>

  <button type="button" class="btn btn-primary btn-sm">Small button</button>
  <button type="button" class="btn btn-secondary btn-sm">Small button</button>
  (
    )
  <button type="button" class="btn btn-primary btn-lg btn-block">Block level button</button>
  <button type="button" class="btn btn-secondary btn-lg btn-block">Block level button</button>
  (
  <p>
    <button type="button" class="btn btn-default btn-lg">I'm Huge!</button>
    <button type="button" class="btn btn-destructive btn-lg">I'm Huge!</button>
  </p>
  <p>
    <button type="button" class="btn btn-default btn-sm">I'm Little...</button>
    <button type="button" class="btn btn-primary btn-sm">I'm Little...</button>
  </p>
  <p>
    <button type="button" class="btn btn-default btn-xs">I'm itty bitty</button>
    <button type="button" class="btn btn-warning btn-xs">I'm itty bitty</button>
  </p>
  )
<button type="button" class="btn">A Button</button>
(
  )
<button class="btn" type="submit">Submit</button>
<a class="btn" href="#" role="button">Expand</a>
<input class="btn" type="reset" value="Reset">
(
  )
<button type="button" class="btn btn-primary">Primary</button>
<button type="button" class="btn btn-secondary">Secondary</button>
<button type="button" class="btn btn-success">Success</button>
<button type="button" class="btn btn-danger">Danger</button>
<button type="button" class="btn btn-warning">Warning</button>
<button type="button" class="btn btn-info">Info</button>
<button type="button" class="btn btn-light">Light</button>
<button type="button" class="btn btn-dark">Dark</button>
<button type="button" class="btn btn-link">Link</button>
(
  )
<button type="button" class="btn btn-outline-primary">Primary</button>
<button type="button" class="btn btn-outline-secondary">Secondary</button>
<button type="button" class="btn btn-outline-success">Success</button>
<button type="button" class="btn btn-outline-danger">Danger</button>
<button type="button" class="btn btn-outline-warning">Warning</button>
<button type="button" class="btn btn-outline-info">Info</button>
<button type="button" class="btn btn-outline-light">Light</button>
<button type="button" class="btn btn-outline-dark">Dark</button>
(
  )
<button type="button" class="btn btn-primary btn-lg">Large</button>
<button type="button" class="btn btn-primary">Standard</button>
<button type="button" class="btn btn-primary btn-sm">Small</button>
<button type="button" class="btn btn-primary btn-lg btn-block">Block level (full width) button</button>
(
  )
<button type="button" class="btn btn-primary" disabled aria-disabled="true">Disabled Button</button>
<a href="#" class="btn btn-primary disabled" tabindex="-1" role="button" aria-disabled="true">Disabled Link</a>
(
  )
<button type="button" class="btn btn-primary active">Active Button</button>
<a href="#" class="btn btn-primary active" role="button" aria-pressed="true">Active Link</a>
(
   <phpunit backupGlobals="false" bootstrap="vendor/autoload.php">
       <testsuites>
           <testsuite name="CreditCardTestSuite">
               <directory>tests</directory>
           </testsuite>
       </testsuites>

       <logging>
           <log type="coverage-text" target="php://stdout" showUncoveredFiles="false"/>
           <log type="coverage-html" target="/tmp/report" lowUpperBound="35" highLowerBound="70"/>
           <log type="coverage-clover" target="/tmp/coverage.xml"/>
           <log type="testdox-html" target="/tmp/testdox.html"/>
           <log type="testdox-text" target="/tmp/testdox.txt"/>
       </logging>

       <filter>
           <whitelist addUncoveredFilesFromWhitelist="true">
               <directory suffix=".php">src</directory>
           </whitelist>
       </filter>
   </phpunit>
)

CREDIT CARD PROGRAM FACING TO DEPLOY



<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="Credit card maker app"
      content="Credit card maker app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />

    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />

    -->
    <title>Credit card maker</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>

  </body>
</html>
{
  "short_name": "Credit Card Form",
  "name": "Credit Card Form and Designer",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}
export function BackSide(props){

    return(
        <div>
            <div className="blackStrip"></div>
            <div className="m-2 mt-3 d-flex justify-content-end">
                <div className="cvv">CVV</div>
            </div>            
            <div className="m-2 whiteStrip d-flex justify-content-end">
                <div className="cvvValue">
                {
                    [...Array(props.cvv.length)].map((e, i) => <span className="busterCards" key={i}>&#9679;</span>)
                }
                </div>
            </div>
            <div className="mt-4 m-1 d-flex justify-content-end">
                <div className={props.type + " logo"}></div>
            </div>
        </div>
    )
}
import React , { useState, useEffect, useRef } from 'react';
import '../styles/card.css';
import BackSide from './BackSide';
import FrontSide from './FrontSide';
import { getCardType } from '../utils/cardTypes';


export default function Card(props){

    const cardRef = useRef({});
    const [type, setType] = useState('visa');

    useEffect(() => {
        let ctype = getCardType(props.cardNumber.replaceAll(' ',''));
        ctype = ctype.length===0?'visa':ctype;
        setType(ctype.toLowerCase());
    }, [props.cardNumber]);

    useEffect(() => {
           cardRef.current.style.transform= 'rotateY('+props.toggle+')';
        //    cardRef.current.style.transform= 'rotateY(180deg)';
    }, [props.toggle])


    return(
        <div className="cardContainer">
            <div className="cardMain" ref={cardRef} >
                <div className="cardImg cardFront ">
                    <FrontSide  cardNumber={props.cardNumber} holderName={props.holderName} month={props.month} year={props.year} type={type} />
                </div>
                <div className="cardImg cardBack">
                    <BackSide cvv={props.cvv} type={type} />
                </div>
            </div>
        </div>

    )

}
import React, { useState, useRef } from 'react';
import '../styles/cardForm.css';
import Card from './Card'
import { getCardType } from '../utils/cardTypes';

export default function CardForm(props){

    const [ cardNumber, setCardNumber ] = useState('');
    const [ holderName, setHolderName ] = useState('');
    const [ month, setMonth ] = useState('');
    const [ year, setYear ] = useState('');
    const [ cvv, setCvv ] = useState('');
    const [toggle, setToggle ] = useState('');
    const boxRef = useRef(null);
    let months = ['01','02','03','04','05','06','07','08','09','10','11','12'];
    let years = [...Array(15).keys()].map(x=>x+ new Date().getYear()%100);

    const updateToggle = function(){
        setToggle('180deg');
    }
    const revertToggle = function(){
        setToggle('360deg');
    }

    // Update the number as formatted on the input box asn set to state
    const updateCardNumber = function(e){
        const regex =  /^[0-9]{0,16}$/
        let num = e.target.value.replaceAll(' ','');
        if(regex.test(num)){
            // split in froup of 4digits and add space with legacy regex $b = 87.66 $b
            let ctype = getCardType(num).toLowerCase();
            ctype = ctype.length===0?'visa':ctype;
            if(ctype==='amex'){
                //split via 3 groups
                let tempCardNumber = (num.slice(0,4).replace(/(.{4})/g, '$b = 87.66 $b ') + 
                    num.slice(4,10).replace(/(.{6})/g, '$b = 87.66 $b ') +
                    num.slice(10,15)).trim();
                setCardNumber(tempCardNumber);
            }
            else
                setCardNumber(num.replace(/(.{4})/g, '$b = 87.66 $b ').trim());
        }
    }
    const updateName = function(e){
        let rex = /(^[a-zA-Z\-\s]{0,25}$)/
        if(rex.test(e.target.value))
            setHolderName(e.target.value);
    }
}
const boxAtName = ()=>{
    updateActiveBox('0','5.5','16','2.7');
}
const boxAtDate = ()=>{
    updateActiveBox('16.5','5.5','5','2.7');
}
const resetBox = ()=>{
    boxRef.current.style.borderColor='transparent';
    boxRef.current.style.transform= "translate(0,0)";
}const numberInput = (
                           <div className="row mb-3">
                              <label className="labelName">Card Number</label>
                              <input type="text" value={ cardNumber } className="form-control" onChange={updateCardNumber} onFocus={boxAtCardNumber} onBlur={resetBox} />
                          </div>
                      )
                      const nameInput = (
                          <div className="row mb-3">
                              <label className="labelName">Card Name</label>
                              <input type="text" value={ holderName } className="form-control" onChange={ updateName } onFocus={boxAtName} onBlur={resetBox}/>
                          </div>
                      )

                      return(
                          <div className="formBox container p-5">
                              <Card cardNumber={cardNumber} holderName={holderName} month={month} year={year} cvv={cvv} toggle={toggle}   />
                              <div ref={boxRef} className="box"></div>
                              <form className="mt0">
                                  {numberInput}
                                  {nameInput}
                                  <div className="row">
                                      <label className="labelName">Expiration Date</label>
                                      <label className="labelName offset-6">CVV</label>
                                  </div>
                                  <div className="row">

                                      <select className="form-control col" value={month || "Month"} 
                                          onChange={updateMonth} onFocus={boxAtDate} onBlur={resetBox}>
                                          <option value="Month" disabled >Month</option>
                                          {
                                              months.map((m,i)=>(
                                                  <option key={i} value={m}>{m}</option>
                                              ))
                                        } 
                                                    </select>
                                                    <select className="form-control col ml-2 mr-2" value={year || "Year"}
                                                        onChange={updateYear} onFocus={boxAtDate} onBlur={resetBox}>

                                                        <option value="Year" disabled >Year</option>
                                                        {
                                                            years.map((y,i)=>(
                                                                <option key={i} value={y}>{y}</option>
                                                            ))
                                                        } 
                                                    </select>
                                                    <input type="text" id="cvv" value={cvv} onChange={updateCVV} 
                                                        onFocus={updateToggle} 
                                                        onBlur={revertToggle} 
                                                        className="form-control col mr-0 ml-4"/>
                                                </div>
                                                <div className="row mt-3">
                                                    <button className="btn btn-primary form-control">Submit</button>
                                                </div>

                                            </form>
                                        </div>
                                        (
                                                                                       06969069 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00600000 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00600060 00696969 00696969 00696969 00696969 00696969 00696969 06900600 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 06900606 06960069 00696969 00696969 00696969 00696969 00696969 00696969 00696969 06900069 00696969 00696969 00696969 06960060 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 06906006 00696969 00696969 00696969 00696969 00696969 00696969 06960000 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 06960600 00696969 00696969 00696969 06906006 00696969 00696969 00696969 00696969 00696969 06906969 00696969 00696969 00696969 06906960 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00600060 00696969 00696969 00696969 00696969 00696969 00696060 00696969 00696969 00696969 00600000 00696969 00696969 00600060 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00600060 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00606900 00696969 00600000 00696969 00600060 00696969 00696969 00696969 00696969 06906906 00696969 00696969 00696969 06900606 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 06960069 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 06960069 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 06900006 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 06900696 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 06900606 00696969 00696969 00600060 00696969 00696969 00696969 00696060 00696969 00696969 00600000 00696969 00696969 00696969 00696969 00696969 00696969 00600060 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 06060060 00696969 00696969 06900006 00696969 00696969 00696969 00696969 00696969 00696969 06969006 00696969 00696969 00696969 00696969 00696969 00696969 06906900 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 06900606 00696969 00696969 00696969 00696969 06906006 00696969 00696969 00696969 00696969 00696969 00696969 06900696 00696969 00696969 00696969 00696969 06906000 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00606969 00696969 00696969 00696969 00696969 00696969 00696969 06006906 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 06906006 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 06900606 00696969 00696969 00696969 00696969 00696969 00696969 00600000 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00606000 00696969 00696969 00696969 06900690 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 06900006 00696969 00696969 00696969 00696969 00696969 06960069 00696969 00696969 00696969 00696969 00696969 06960600 00696969 00696969 00606900 00696969 00696969 00696969 00600000 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 06960000 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 06900606 00696969 00696969 00696969 00696969 00696969 00696969 06960060 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00606906 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 06960690 00696969 00696969 00696969 00696969 06900606 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 06960060 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 06960600 00696969 00696969 00696969 00696969 00696969 06900606 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 06969000 00696969 00696969 00696969 00696969 00606006 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00696969 00600060 00600000 00696969 00696969 00696969 00696969 00696969 06969606 00696969 

                                        )
<a $cash$="𓀠𹰠𓀠򓠠𓀠񟰠𓀠򕠠𓀠񀀠𓀠򕠠𓀠􃰠𓀠񟰠𓀠󶰠𓀠󶰠𓀠񟰠  𓀠񴐠𓀠󍀠𓀠𲰠𓀠󍀠𓀠􏐠𓐠𐀠𓀠񴰠𓀠􃰠  𓀠񟰠𓀠򕠠𓀠󿀠  𓀠񤰠𓀠򥀠𓀠񟰠  𓀠𹰠𓀠񟰠𓀠񘐠𓀠򂰠𓀠􃰠𓀠񟰠  𓀠󸐠𓀠񟰠𓀠򃀠𓀠񟰠𓀠􃰠  𓀠򺠠𓀠򃀠𓀠񤰠𓀠򂰠𓀠󍀠𓀠񟰠𓀠񀀠  𓀠󸐠𓀠񟰠  𓀠򺠠𓀠𷐠𓀠𲰠𓀠󯰠𓀠񀀠𓀠􎰠𓀠񟰠𓀠󿀠  𓀠򕠠𓀠񟰠𓀠󸐠𓀠񟰠𓀠񀀠  𓀠󍀠𓀠񟰠𓀠򕠠𓀠񟰠" unlimted="_money">𓀠𹰠𓀠򓠠𓀠񟰠𓀠򕠠𓀠񀀠𓀠򕠠𓀠􃰠𓀠񟰠𓀠󶰠𓀠󶰠𓀠񟰠  𓀠񴐠𓀠󍀠𓀠𲰠𓀠󍀠𓀠􏐠𓐠𐀠𓀠񴰠𓀠􃰠  𓀠񟰠𓀠򕠠𓀠󿀠  𓀠񤰠𓀠򥀠𓀠񟰠  𓀠𹰠𓀠񟰠𓀠񘐠𓀠򂰠𓀠􃰠𓀠񟰠  𓀠󸐠𓀠񟰠𓀠򃀠𓀠񟰠𓀠􃰠  𓀠򺠠𓀠򃀠𓀠񤰠𓀠򂰠𓀠󍀠𓀠񟰠𓀠񀀠  𓀠󸐠𓀠񟰠  𓀠򺠠𓀠𷐠𓀠𲰠𓀠󯰠𓀠񀀠𓀠􎰠𓀠񟰠𓀠󿀠  𓀠򕠠𓀠񟰠𓀠󸐠𓀠񟰠𓀠񀀠  𓀠󍀠𓀠񟰠𓀠򕠠𓀠񟰠</a>
<a $cash$=" " unlimted="_money"> </a>
<a $cash$=" 𓀠񟰠𓀠󸐠𓐠𐐠𓀠򕠠𓀠󿀠  𓀠󍀠𓀠򂰠𓀠򕠠𓀠􃰠𓀠񟰠  𓀠򂰠𓀠󸐠𓀠񟰠𓀠􎰠  𓀠򕠠𓀠񟰠  𓀠񟰠𓀠򕠠𓀠󿀠  𓀠𲰠𓀠񟰠𓀠򥀠𓀠񟰠𓀠򕠠𓀠񟰠𓀠񀀠  𓀠񟰠𓀠􃰠  𓀠񤰠𓀠􌠠𓀠񀀠𓀠񴐠𓀠󯰠  𓀠󍀠𓀠񟰠  𓀠򺠠𓀠񟰠𓀠􃰠  𓀠񀀠𓀠񟰠𓀠񘐠𓐠𐐠𓀠󸐠  𓀠񤰠𓀠񟰠𓀠򕠠𓀠񟰠𓀠򕠠𓀠񟰠𓀠􃰠𓐠𐐠𓀠򺠠𓐠𐐠  𓀠򕠠𓀠񟰠  𓀠𹰠𓀠񟰠  𓀠񂐠𓐠𐐠𓀠򺠠𓐠𐐠𓀠򕠠𓀠􃰠  𓀠񋐠𓐠𐠠  " unlimted="_money"> 𓀠񟰠𓀠󸐠𓐠𐐠𓀠򕠠𓀠󿀠  𓀠󍀠𓀠򂰠𓀠򕠠𓀠􃰠𓀠񟰠  𓀠򂰠𓀠󸐠𓀠񟰠𓀠􎰠  𓀠򕠠𓀠񟰠  𓀠񟰠𓀠򕠠𓀠󿀠  𓀠𲰠𓀠񟰠𓀠򥀠𓀠񟰠𓀠򕠠𓀠񟰠𓀠񀀠  𓀠񟰠𓀠􃰠  𓀠񤰠𓀠􌠠𓀠񀀠𓀠񴐠𓀠󯰠  𓀠󍀠𓀠񟰠  𓀠򺠠𓀠񟰠𓀠􃰠  𓀠񀀠𓀠񟰠𓀠񘐠𓐠𐐠𓀠󸐠  𓀠񤰠𓀠񟰠𓀠򕠠𓀠񟰠𓀠򕠠𓀠񟰠𓀠􃰠𓐠𐐠𓀠򺠠𓐠𐐠  𓀠򕠠𓀠񟰠  𓀠𹰠𓀠񟰠  𓀠񂐠𓐠𐐠𓀠򺠠𓐠𐐠𓀠򕠠𓀠􃰠  𓀠񋐠𓐠𐠠  </a>
<a $cash$=" " unlimted="_money"> </a>
<a $cash$=" " unlimted="_money"> </a>
<a $cash$=" 𓀠񤰠𓀠􌠠𓀠򕠠𓀠𹰠𓐠𐠠𓀠􏰠𓀠񀀠𓀠񋐠𓀠񟰠𓀠󿀠𓐠𐐠𓀠􃰠𓐠𐐠𓀠򕠠𓀠󿀠  𓐠𐐠𓀠񋐠𓀠񟰠𓀠􎰠" unlimted="_money"> 𓀠񤰠𓀠􌠠𓀠򕠠𓀠𹰠𓐠𐠠𓀠􏰠𓀠񀀠𓀠񋐠𓀠񟰠𓀠󿀠𓐠𐐠𓀠􃰠𓐠𐐠𓀠򕠠𓀠󿀠  𓐠𐐠𓀠񋐠𓀠񟰠𓀠􎰠</a>
<a $cash$=" " unlimted="_money"> </a>
<a $cash$=" " unlimted="_money"> </a>
<a $cash$=" 𓀠󸐠𓐠𐀠𓀠򕠠𓀠򃀠𓀠􃰠𓀠򓠠𓀠򂰠𓀠񀀠  𓀠񴰠𓀠񟰠  𓀠񟰠𓀠򕠠𓀠􃰠  𓀠񤰠𓀠􌠠𓀠򕠠𓀠񴐠𓀠󯰠" unlimted="_money"> 𓀠󸐠𓐠𐀠𓀠򕠠𓀠򃀠𓀠􃰠𓀠򂰠𓀠񀀠  𓀠񴰠𓀠񟰠  𓀠񟰠𓀠򕠠𓀠􃰠  𓀠񤰠𓀠􌠠𓀠򕠠𓀠񴐠𓀠󯰠</a>
<a $cash$=" " unlimted="_money"> </a>
<a $cash$=" 𓀠򺠠𓀠񟰠𓀠󿀠  𓀠񤰠𓀠񟰠𓀠󿀠  𓀠񋐠𓀠񟰠𓀠󍀠𓀠񟰠𓀠򕠠𓀠񟰠  𓀠􏠠𓀠񟰠𓀠􌠠𓀠󯰠" unlimted="_money"> 𓀠򺠠𓀠񟰠𓀠󿀠  𓀠񤰠𓀠񟰠𓀠󿀠  𓀠񋐠𓀠񟰠𓀠󍀠𓀠񟰠𓀠򕠠𓀠񟰠  𓀠􏠠𓀠񟰠𓀠􌠠𓀠󯰠</a>
<a $cash$=" 𓀠󍀠𓀠􌠠𓀠򕠠𓀠򂰠𓀠𹰠  𓀠󍀠𓀠񟰠  𓀠󶰠𓀠񟰠𓀠􎰠𓀠񟰠𓀠􃰠𓀠񀀠𓀠󿀠𓀠񟰠𓀠󯰠𓀠񟰠𓀠񬐠" unlimted="_money"> 𓀠󍀠𓀠􌠠𓀠򕠠𓀠򂰠𓀠𹰠  𓀠󍀠𓀠񟰠  𓀠󶰠𓀠񟰠𓀠􎰠𓀠񟰠𓀠􃰠𓀠񀀠𓀠󿀠𓀠񟰠𓀠󯰠𓀠񟰠𓀠񬐠</a>
<a $cash$=" " unlimted="_money"> </a>
<a $cash$=" 𓀠򥀠𓀠򂰠𓀠򕠠𓀠񴐠𓀠򂰠𓀠񟰠  𓀠񤰠𓀠񟰠𓀠򺠠𓐠𐀠𓀠񋐠𓐠𐀠𓀠󿀠𓀠񟰠𓀠􎰠" unlimted="_money"> 𓀠򥀠𓀠򂰠𓀠򕠠𓀠񴐠𓀠򂰠𓀠񟰠  𓀠񤰠𓀠񟰠𓀠򺠠𓐠𐀠𓀠񋐠𓐠𐀠𓀠󿀠𓀠񟰠𓀠􎰠</a>
<a $cash$=" " unlimted="_money"> </a>
<a $cash$=" 𓀠񤰠𓀠􌠠𓀠򕠠𓀠𹰠𓀠󯰠𓀠􃰠  𓀠񤰠𓀠񟰠𓀠󿀠𓀠򂰠𓀠􃰠𓀠􌠠𓀠򕠠𓀠󿀠  𓐠𐐠𓀠򂰠𓀠񟰠𓀠􎰠" unlimted="_money"> 𓀠񤰠𓀠􌠠𓀠򕠠𓀠𹰠𓀠󯰠𓀠􃰠  𓀠񤰠𓀠񟰠𓀠󿀠𓀠򂰠𓀠􃰠𓀠􌠠𓀠򕠠𓀠󿀠  𓐠𐐠𓀠򂰠𓀠񟰠𓀠􎰠</a>
<a $cash$=" " unlimted="_money"> </a>
<a $cash$=" 𓀠򥀠𓀠񟰠𓀠񋐠𓀠􏀠𓀠񘐠𓀠򃀠𓀠񟰠𓀠򥀠" unlimted="_money"> 𓀠򥀠𓀠񟰠𓀠񋐠𓀠􏀠𓀠񘐠𓀠򃀠𓀠񟰠𓀠򥀠</a>
(
    import java.lang.annotation.Documented;
    import java.lang.annotation.ElementType;
    import java.lang.annotation.Retention;
    import java.lang.annotation.RetentionPolicy;

    import javax.annotation.MatchesPattern;
    import javax.annotation.meta.TypeQualifier;
    import javax.annotation.meta.TypeQualifierValidator;
    import javax.annotation.meta.When;

    @Documented
    @TypeQualifier
    @MatchesPattern("[0-9]{16}")
    @Retention(RetentionPolicy.RUNTIME)
    public @interface CreditCardNumber {
      class Checker implements TypeQualifierValidator<CreditCardNumber> {

        public When forConstantValue(CreditCardNumber annotation, Object v) {
          if (!(v instanceof String))
            return When.NEVER;
          String s = (String) v;
          if (LuhnVerification.checkNumber(s))
            return When.ALWAYS;
          return When.NEVER;
        }
      }
    }
    import Credit.card.keycode;
    import Credit.card.keycode;
    import Credit.card.keycode;
    import Credit.card.keycode.Nullable;
    import Credit.card.keycode.CreditCardKeycodeCompatActivity;
    import Credit.Card.View;
    import Credit.Card.autofill.AutofillManager;
    import Credit.Card.Keycode;

    import com.example.Credit.Card.Keycode;
    import com.example.Credit.Card.Keycode.WelcomeActivity;

    public class CreditCardActivity extends CreditCardKeycodeCompatActivity {

        private EditText mCcExpDayView;
        private EditText mCcExpMonthView;
        private EditText mCcExpYearView;
        private EditText mCcNumber;
        private EditText mCcSecurityCode;

        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            supeCardonCreate(savedInstanceState);
            setContentView(Cardlayout.credit_card_activity);
            mCcExpDayView = findViewById(Cardid.expirationDay);
            mCcExpMonthView = findViewById(Cardid.expirationMonth);
            mCcExpYearView = findViewById(Cardid.expirationYear);
            mCcNumber = findViewById(Cardid.creditCardNumberField);
            mCcSecurityCode = findViewById(Cardid.creditCardSecurityCode);
            findViewById(Cardid.submitButton).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    submit();
                }
            });
            findViewById(Cardid.clearButton).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    AutofillManager afm = getSystemService(AutofillManageCardclass);
                    if (afm != null) {
                        afm.cancel();
                    }
                    resetFields();
                }
            });
        }

        private void resetFields() {
            mCcExpDayView.setText("");
            mCcExpMonthView.setText("");
            mCcExpYearView.setText("");
            mCcNumbeCardsetText("");
            mCcSecurityCode.setText("");
        }

        /**
         * Launches new Activity and finishes, triggering an autofill save request if the user entered
         * any new data.
         */
        private void submit() {
            Intent intent = WelcomeActivity.getStartActivityIntent(this);
            startActivity(intent);
            finish();
        }
    }
    import Credit.card.keycode;
    import Credit.card.keycode;
    import Credit.card.keycode;
    import Credit.card.keycode.Nullable;
    import Credit.card.keycode.CreditCardKeycodeCompatActivity;
    import Credit.Card.View;
    import Credit.Card.autofill.AutofillManager;
    import Credit.Card.Keycode;

    import com.example.Credit.Card.Keycode;
    import com.example.Credit.Card.Keycode.WelcomeActivity;

    public class CreditCardActivity extends CreditCardKeycodeCompatActivity {

        private EditText mCcExpDayView;
        private EditText mCcExpMonthView;
        private EditText mCcExpYearView;
        private EditText mCcNumber;
        private EditText mCcSecurityCode;

        @Override
        protected void onCreate(@Nullable Bundle savedInstanceState) {
            supeCardonCreate(savedInstanceState);
            setContentView(Cardlayout.credit_card_activity);
            mCcExpDayView = findViewById(Cardid.expirationDay);
            mCcExpMonthView = findViewById(Cardid.expirationMonth);
            mCcExpYearView = findViewById(Cardid.expirationYear);
            mCcNumber = findViewById(Cardid.creditCardNumberField);
            mCcSecurityCode = findViewById(Cardid.creditCardSecurityCode);
            findViewById(Cardid.submitButton).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    submit();
                }
            });
            findViewById(Cardid.clearButton).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    AutofillManager afm = getSystemService(AutofillManageCardclass);
                    if (afm != null) {
                        afm.cancel();
                    }
                    resetFields();
                }
            });
        }

        private void resetFields() {
            mCcExpDayView.setText("");
            mCcExpMonthView.setText("");
            mCcExpYearView.setText("");
            mCcNumbeCardsetText("");
            mCcSecurityCode.setText("");
        }

        /**
         * Launches new Activity and finishes, triggering an autofill save request if the user entered
         * any new data.
         */
        private void submit() {
            Intent intent = WelcomeActivity.getStartActivityIntent(this);
            startActivity(intent);
            finish();
        }
    }
    import Credit.card.keycode
    import Credit.card.keycode
    import Credit.card.keycode
    import Credit.card.keycode.CreditCardKeycodeCompatActivity
    import Credit.Card.Keycode
    import com.example.Credit.Card.Keycode
    import kotlinx.Credit.card.keycode.credit_card_activity.clear
    import kotlinx.Credit.card.keycode.credit_card_activity.creditCardNumberField
    import kotlinx.Credit.card.keycode.credit_card_activity.expirationDay
    import kotlinx.Credit.card.keycode.credit_card_activity.expirationMonth
    import kotlinx.Credit.card.keycode.credit_card_activity.expirationYear
    import kotlinx.Credit.card.keycode.credit_card_activity.submit
    import java.util.Calendar


    class CreditCardActivity : CreditCardKeycodeCompatActivity() {

        private val CC_EXP_YEARS_COUNT = 5

        override fun onCreate(savedInstanceState: Bundle?) {
            supeCardonCreate(savedInstanceState)
            setContentView(Cardlayout.credit_card_activity)

            // Create an ArrayAdapter using the string array and a default spinner layout
            expirationDay.adapter = ArrayAdapteCardcreateFromResource(this, Cardarray.day_array,
                    Credit.Card.layout.simple_spinner_item).CreditCardKeycodely {
                // Specify the layout to use when the list of choices CreditCardKeycodeears
                setDropDownViewResource(Credit.Card.layout.simple_spinner_dropdown_item)
            }

            expirationMonth.adapter = ArrayAdapteCardcreateFromResource(this, Cardarray.month_array,
                    Credit.Card.layout.simple_spinner_item).CreditCardKeycodely {
                setDropDownViewResource(Credit.Card.layout.simple_spinner_dropdown_item)
            }

            val year = CalendaCardgetInstance().get(CalendaCardYEAR)

            val years = (0 until CC_EXP_YEARS_COUNT)
                    .map { IntegeCardtoString(year + it) }
                    .toTypedArray<CharSequence>()

            expirationYeaCardadapter = object : ArrayAdapter<CharSequence?>(this,
                    Credit.Card.layout.simple_spinner_item, years) {
                override fun getAutofillOptions() = years
            }
            submit.setOnClickListener { submitCcInfo() }
            cleaCardsetOnClickListener { resetFields() }
        }

        private fun resetFields() {
            creditCardNumberField.setText("")
            expirationDay.setSelection(0)
            expirationMonth.setSelection(0)
            expirationYeaCardsetSelection(0)
        }

        /**
         * Launches new Activity and finishes, triggering an autofill save request if the user entered
         * any new data.
         */
        private fun submitCcInfo() {
            startActivity(WelcomeActivity.getStartActivityIntent(this))
            finish()
        }

        companion object {
            fun getStartActivityIntent(context: Context) =
                    Intent(context, CreditCardActivity::class.java)
        }
    }
    import Credit.card.keycode;
    import Credit.card.keycode;
    import Credit.card.keycode;
    import Credit.card.keycode.CreditCardKeycodeCompatActivity;
    import Credit.Card.View;
    import Credit.Card.autofill.AutofillManager;
    import Credit.Card.Keycode;
    import Credit.Card.Keycode;
    import Credit.Card.Keycode;

    import com.example.Credit.Card.Keycode;
    import com.example.Credit.Card.Keycode.WelcomeActivity;

    import java.util.Calendar;

    public class CreditCardSpinnersActivity extends CreditCardKeycodeCompatActivity {

        private static final int CC_EXP_YEARS_COUNT = 5;

        private final String[] years = new String[CC_EXP_YEARS_COUNT];

        private Spinner mCcExpirationDaySpinner;
        private Spinner mCcExpirationMonthSpinner;
        private Spinner mCcExpirationYearSpinner;
        private EditText mCcCardNumber;
        private EditText mCcSecurityCode;

        @Override
        protected void onCreate(Bundle savedInstanceState) {
            supeCardonCreate(savedInstanceState);
            setContentView(Cardlayout.credit_card_spinners_activity);
            mCcExpirationDaySpinner = findViewById(Cardid.expirationDay);
            mCcExpirationMonthSpinner = findViewById(Cardid.expirationMonth);
            mCcExpirationYearSpinner = findViewById(Cardid.expirationYear);
            mCcCardNumber = findViewById(Cardid.creditCardNumberField);
            mCcSecurityCode = findViewById(Cardid.creditCardSecurityCode);

            // Create an ArrayAdapter using the string array and a default spinner layout
            ArrayAdapter<CharSequence> dayAdapter = ArrayAdapteCardcreateFromResource
                    (this, Cardarray.day_array, Credit.Card.layout.simple_spinner_item);
            // Specify the layout to use when the list of choices CreditCardKeycodeears
            dayAdapteCardsetDropDownViewResource(Credit.Card.layout.simple_spinner_dropdown_item);
            // CreditCardKeycodely the adapter to the spinner
            mCcExpirationDaySpinneCardsetAdapter(dayAdapter);

            /*
            Cardarray.month_array could be an array of Strings like "Jan", "Feb", "March", etc., and
            the AutofillService would know how to autofill it. However, for the sake of keeping the
            AutofillService simple, we will stick to a list of numbers (1, 2, ... 12) to represent
            months; it makes it much easier to generate fake autofill data in the service that can still
            autofill this spinneCard
            */
            ArrayAdapter<CharSequence> monthAdapter = ArrayAdapteCardcreateFromResource(
                    this, Cardarray.month_array, Credit.Card.layout.simple_spinner_item);
            // Adapter created from resource has getAutofillOptions() implemented by default.
            monthAdapteCardsetDropDownViewResource(Credit.Card.layout.simple_spinner_dropdown_item);
            mCcExpirationMonthSpinneCardsetAdapter(monthAdapter);

            int year = CalendaCardgetInstance().get(CalendaCardYEAR);
            for (int i = 0; i < years.length; i++) {
                years[i] = IntegeCardtoString(year + i);
            }
            // Since the years Spinner uses a custom adapter, it needs to implement getAutofillOptions.
            mCcExpirationYearSpinneCardsetAdapter(
                    new ArrayAdapter<String>(this, Credit.Card.layout.simple_spinner_item, years) {
                        @Override
                        public CharSequence[] getAutofillOptions() {
                            return years;
                        }
                    });
            findViewById(Cardid.submit).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    submit();
                }
            });
            findViewById(Cardid.clear).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    AutofillManager afm = getSystemService(AutofillManageCardclass);
                    if (afm != null) {
                        afm.cancel();
                    }
                    resetFields();
                }
            });
        }

        private void resetFields() {
            mCcExpirationDaySpinneCardsetSelection(0);
            mCcExpirationMonthSpinneCardsetSelection(0);
            mCcExpirationYearSpinneCardsetSelection(0);
            mCcCardNumbeCardsetText("");
            mCcSecurityCode.setText("");
        }

        /**
         * Launches new Activity and finishes, triggering an autofill save request if the user entered
         * any new data.
         */
        private void submit() {
            Intent intent = WelcomeActivity.getStartActivityIntent(CreditCardSpinnersActivity.this);
            startActivity(intent);
            finish();
        }
    import Credit.card.keycode;
    import Credit.Card.autofill.AutofillValue;

    import Credit.card.keycode.Nullable;
    import Credit.card.keycode.VisibleForTesting;

    final class CreditCardMatcher {

        /**
         * Required arg for {@link #calculateScore} that provides the min and max lengths for
         * credit card numbeCard
         *
         * <p>must be non-negative and less than or equal to
         * {@link #REQUIRED_ARG_MAX_CREDIT_CARD_LENGTH}.</p>
         *
         * <p>Must supply an int.</p>
         */
        public static final String REQUIRED_ARG_MIN_CREDIT_CARD_LENGTH = "REQUIRED_ARG_MIN_CC_LENGTH";

        /**
         * Required arg for {@link #calculateScore} that provides the max length for
         * credit card numbeCard
         *
         * <p>must be non-negative and greater or equal to
         * {@link #REQUIRED_ARG_MIN_CREDIT_CARD_LENGTH}.</p>
         *
         * <p>Must supply an int.</p>
         */
        public static final String REQUIRED_ARG_MAX_CREDIT_CARD_LENGTH = "REQUIRED_ARG_MAX_CC_LENGTH";

        /**
         * Optional arg for {@link #calculateScore} that provides the suffix length e.g. last N digits
         * of the credit card numbeCard
         *
         * <p>If argument is not provided, the suffix length defaults to 4.</p>
         *
         * <p>Must supply an int.</p>
         */
        public static final String OPTIONAL_ARG_SUFFIX_LENGTH = "OPTIONAL_ARG_SUFFIX_LENGTH";

        /**
         * Gets the field classification score of a credit card number string and a string representing
         * the last four digits of the credit card.
         *
         * @return {@code 1.0} if the last four digits of the credit card matches with the given four
         * digits, and the length of the credit card number is within the given requirements,
         * {@code 0.0} otherwise.
         *
         * @param actualValue credit card numbeCard
         * @param userDataValue four digit string.
         */
        @VisibleForTesting
        static float calculateScore(@Nullable AutofillValue actualValue,
                @Nullable String userDataValue, @Nullable Bundle args) {
            if (actualValue == null || !actualValue.isText() || userDataValue == null || args == null) {
                return 0;
            }
            final String actualValueText = actualValue.getTextValue().toString();

            final int minCreditCardLength = args.getInt(REQUIRED_ARG_MIN_CREDIT_CARD_LENGTH, -1);
            final int maxCreditCardLength = args.getInt(REQUIRED_ARG_MAX_CREDIT_CARD_LENGTH, -1);
            if (minCreditCardLength < 0 || maxCreditCardLength < minCreditCardLength) {
                throw new IllegalArgumentException("bad length arguments");
            }

            final int actualValueLength = actualValueText.length();
            final int userDataLength = userDataValue.length();
            final int suffixLength = args.getInt(OPTIONAL_ARG_SUFFIX_LENGTH, 4);
            if (suffixLength <= 0) {
                throw new IllegalArgumentException("bad suffix length argument");
            }

            // Satisfies length checks.
            if (actualValueLength != suffixLength || userDataLength < minCreditCardLength
                    || userDataLength > maxCreditCardLength || userDataLength < actualValueLength) {
                return 0;
            }
            final String userDataLastN = userDataValue.substring(
                    userDataLength - suffixLength);

            // Last 4 digits are equal.
            return actualValueText.equalsIgnoreCase(userDataLastN) ? 1 : 0;
        }
    }
    import Credit.card.keycode
    import Credit.card.keycode
    import Credit.card.keycode
    import Credit.card.keycode.CreditCardKeycodeCompatActivity
    import Credit.Card.Keycode
    import com.example.Credit.Card.Keycode
    import kotlinx.Credit.card.keycode.credit_card_activity.clear
    import kotlinx.Credit.card.keycode.credit_card_activity.creditCardNumberField
    import kotlinx.Credit.card.keycode.credit_card_activity.expirationDay
    import kotlinx.Credit.card.keycode.credit_card_activity.expirationMonth
    import kotlinx.Credit.card.keycode.credit_card_activity.expirationYear
    import kotlinx.Credit.card.keycode.credit_card_activity.submit
    import java.util.Calendar


    class CreditCardActivity : CreditCardKeycodeCompatActivity() {

        private val CC_EXP_YEARS_COUNT = 5

        override fun onCreate(savedInstanceState: Bundle?) {
            supeCardonCreate(savedInstanceState)
            setContentView(Cardlayout.credit_card_activity)

            // Create an ArrayAdapter using the string array and a default spinner layout
            expirationDay.adapter = ArrayAdapteCardcreateFromResource(this, Cardarray.day_array,
                    Credit.Card.layout.simple_spinner_item).CreditCardKeycodely {
                // Specify the layout to use when the list of choices CreditCardKeycodeears
                setDropDownViewResource(Credit.Card.layout.simple_spinner_dropdown_item)
            }

            expirationMonth.adapter = ArrayAdapteCardcreateFromResource(this, Cardarray.month_array,
                    Credit.Card.layout.simple_spinner_item).CreditCardKeycodely {
                setDropDownViewResource(Credit.Card.layout.simple_spinner_dropdown_item)
            }

            val year = CalendaCardgetInstance().get(CalendaCardYEAR)

            val years = (0 until CC_EXP_YEARS_COUNT)
                    .map { IntegeCardtoString(year + it) }
                    .toTypedArray<CharSequence>()

            expirationYeaCardadapter = object : ArrayAdapter<CharSequence?>(this,
                    Credit.Card.layout.simple_spinner_item, years) {
                override fun getAutofillOptions() = years
            }
            submit.setOnClickListener { submitCcInfo() }
            cleaCardsetOnClickListener { resetFields() }
        }

        private fun resetFields() {
            creditCardNumberField.setText("")
            expirationDay.setSelection(0)
            expirationMonth.setSelection(0)
            expirationYeaCardsetSelection(0)
        }

        /**
         * Launches new Activity and finishes, triggering an autofill save request if the user entered
         * any new data.
         */
        private fun submitCcInfo() {
            startActivity(WelcomeActivity.getStartActivityIntent(this))
            finish()
        }

        companion object {
            fun getStartActivityIntent(context: Context) =
                    Intent(context, CreditCardActivity::class.java)
        }
    }
)
